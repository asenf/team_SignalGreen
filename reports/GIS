


Use of GIS
In the final version of our software vehicle’s movement is coordinated by using the Geographic Information System. 
This allows for the program to use real maps with real data in them, from any country in the world. 
It uses a more realistic coordinate system, with azimuth angles, that take into account the fact that the maps are projected onto a sphere, 
not a flat plane as is the case with the Cartesian system the UI uses. 
This allows for more realistic simulation but adds another layer of complexity to the code base.
A further complication is the fact that GIS uses true north, and the UI uses grid north.
However the use of GIS means that both the topology and the actual distance in metres is real, creating more meaningful data in our traffic analysis. 

What GIS is
GIS uses azimuth coordinates not Cartesian, like the UI does
GIS points to true north, UI to grid north

GIS is a system that captures the geographical data of the real world, 
and allows access to it in the form of standardised shape files.
The GIS module is the most accurate representation of the real world that Repast Simphony provides.
However, there is a mismatch between the Cartesian system of coordinates the UI uses and the spherical coordinates GIS uses. 

What azimuth coordinates are – needed because using real maps are  projections on sphere
What the calculations are
What true north vs grid north is
In code
1)	From GIS map shape files to Agents
2)	What methods do what 
3)	Library geotools + methods used briefly 
Vehicle class has two sets of coordinates – realPos for the UI, networkPos for calculations
Utils.distance – uses geodetic calculator to get distance in metres between two GIS coordinates
Vehicle.moveTowards – takes in a coordinate and distance, converts it to GIS coord, 
and updates positions in the real GIS geography as well as the UI.
getPosition takes in a single coordinate and returns an array of perpendicular coordinates, two logical and two real. 

Two methods getNetworkPosFromRealPos and getRealPosFromNetworkPos both wrap the method getPosition,  
and based on the vehicles current lane returns a coordinate from the array. 
getPosition further calls two methods in Utils, getAzimuth and createCoordsFromAngle.

Utils.getAzimuth – takes in two coordiantes and geography, returns the azimuth as a double
Utils.createCoordsFromAngle - 

Conclusion 
This allows for any map all over the world to be used
Makes traffic simulation much more realistic – based on real data rather than fake maps we made
Extendable –  future work can easily be adapted to use any road map for any country in the world.
